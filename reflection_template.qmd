---
title: "STAT 331 Portfolio"
author: "Alex Goodman"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
# Lab2 Q2
surveys <- read_csv(here("Week 2", "Lab 2", "surveys.csv"))

```

-   `xlsx`

```{r wd-1-xlsx}
# PA4 Q1
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 191)
```

-   `txt`

```{r wd-1-txt}
# PA 5.2 Q1
message <- read_csv(here::here("scrambled_message.txt")
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
# PA 3 Q1
colleges_clean <- colleges |> 
  select(INSTNM, CITY, STABBR, ZIP,
         ADM_RATE, SAT_AVG, UGDS,
         TUITIONFEE_IN, TUITIONFEE_OUT,
         CONTROL, REGION) 
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
# PA 3 Q2
colleges_clean <- colleges_clean |> 
  filter(CONTROL == 1 | CONTROL == 2) 
```

-   character -- specifically a string

```{r wd-3-string}
# PA 5.2 Q3
message |>
  filter(str_detect(Word, pattern = '^m'))
```

-   factor

```{r wd-3-factor}
# lab 3 Q 13
hiphop_clean |>
  filter(ethnic == 'white', sex == "Male", age > 30, 
         familiarity == 5) |>
  arrange(familiarity, desc(familiarity), by_group = TRUE) |>
  group_by(familiarity) |>
  count(word, sort=TRUE)

hiphop_clean |>
  filter(ethnic == 'white', sex == "Male", age > 30,
         familiarity == 1) |>
  arrange(familiarity, desc(familiarity), by_group = TRUE) |>
  group_by(familiarity) |>
  count(word, sort=TRUE)

```

-   date

```{r wd-3-date}
# PA 5.1 Q1

suspects <- suspects %>% 
  filter(pm(Time.Spotted))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# PA 3 Q4
colleges_clean <- colleges_clean |> 
  mutate(
    TUITIONFEE_IN = as.numeric(TUITIONFEE_IN),
    TUITIONFEE_OUT = as.numeric(TUITIONFEE_OUT),
    SAT_AVG = as.numeric(SAT_AVG),
    ADM_RATE = as.numeric(ADM_RATE),
    UGDS = as.numeric(UGDS)
    ) 
```

-   character -- specifically a string

```{r wd-4-string}
# PA 5.2 Q1
message %>% 
  mutate(length = str_length(Word)) %>% 
  summarise(total_length = sum(length))
```

-   factor

```{r wd-4-factor}
# lab 5 Q 8
surveys4 <- surveys |>
  select(genus, weight, day_of_week)

ggplot(data=surveys4, mapping = aes(x = fct_relevel(day_of_week, c('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')), fill = genus)) +
  geom_bar() +
  labs(x = 'Day of Week', y = '', title = 'Number of Rats per Day of Week')
```

-   date

```{r wd-4-date}
# PA 5.1 Q 1
suspects <- suspects %>% 
  mutate(Time.Spotted = ymd_hms(Time.Spotted), 
         Time.Spotted = force_tz(Time.Spotted, 
                                 tzone = "America/Los_Angeles"))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}
# prev act 11 
profs |>
  left_join(prof_info, prof_course)
```

-   `right_join()`

```{r wd-5-right}
# prev act 11 Q1
profs |>
  right_join(prof_info, prof_course)
```

-   `inner_join()`

```{r wd-5-inner}
# prev act 11
profs |>
  inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}
# Prev Activity 11 Q2
profs|>
  full_join(prof_info, prof_course)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}
# Lab4 Q2
major_avocado <- avocado_clean |>
  semi_join(regions_major, by = 'region')
```

-   `anti_join()`

```{r wd-6-anti}
# Lab4 Q2
metro_avocado <- avocado_clean |>
  anti_join(regions_nonmajor, by = 'region') |>
  anti_join(regions_major, by = 'region') |>
  filter(region != "TotalUS")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}
# lab4 Q7
avocado_final <- avocado_clean|>
  filter(region %in% c('LosAngeles', 'SanDiego', 'Sacramento', 'SanFrancisco')) |>
  pivot_longer(small_avocado:xlarge_avocado, names_to = 'size', values_to = 'quantity') |>
  group_by(region, type, size) |>
  summarise(mean_sold = mean(quantity), proportion = quantity / total_volume)
```

-   `pivot_wider()`

```{r wd-7-wide}
# Lab4 Q6
cal_avocado <- avocado_clean |>
  group_by(region, type) |>
  semi_join(cal_regions, by = 'region') |>
  summarise(mean_price = mean(AveragePrice)) |>
  pivot_wider(names_from = type , values_from = mean_price) |>
  mutate(diff = conventional - organic)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
#PA4 Q1
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 191)

military_clean <- military |>
  mutate(across(.col = `Notes`:`2019`, 
         .fns = na_if,
         '. .')) |>
  mutate(across(.col = `Notes`:`2019`, 
                .fns = na_if,
                'xxx')) |>
  mutate(across(.col = `1988`:`2019`,
                .fns = as.numeric))
```

-   Example 2

```{r r-2-2}
#PA3 Q1
colleges_clean <- colleges |> 
  select(INSTNM, CITY, STABBR, ZIP,
         ADM_RATE, SAT_AVG, UGDS,
         TUITIONFEE_IN, TUITIONFEE_OUT,
         CONTROL, REGION) 
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}
#Lab2 Q7
ggplot(data=surveys) + 
  geom_jitter(mapping=aes(x=weight, y=hindfoot_length, alpha = 0.1 ), position="jitter") + 
  labs(title = "Species Weight vs. Hindfoot Length", 
  x= "Weight (g)", y= "Hindfoot Length (mm)") +
  facet_wrap(~species)
```

-   Example 2

```{r r-3-2}
#LAB 7 3.5
rescale_column <- function(df, var_vec){
  fish <- fish |>
    mutate(across(.cols = {{ var_vec }}, 
                  ~ rescale_01(.x)
                  )
           )
  fish
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
#Lab2 Q4
# Code for question 4! 
ggplot(data=surveys) + 
  geom_point(mapping=aes(x=weight, y=hindfoot_length)) +
  labs(title = "Species Weight vs. Hindfoot Length", x= "Weight (g)", y= "Hindfoot Length (mm)")
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}
#Lab5 Q6
surveys5 <- surveys |>
  select(genus, weight, day_of_week)

ggplot(data=surveys5, mapping = aes(x = fct_collapse(day_of_week, weekday = c('Mon', 'Tue', 'Wed', 'Thu', 'Fri'), weekend = c('Sat', 'Sun')), fill=genus)) +
  geom_bar() +
  labs(x= 'Day of Week', y = '', title = 'Number of Rats per Day of Week')
```

-   categorical variables

```{r dvs-2-cat}
#lab3 q6
hiphop_clean |>
  distinct(word) |>
  summarise()
hiphop_clean
```

-   dates

```{r dvs-2-date}
#PA 5 Q1
thanksgiving <- ymd(20181122, tz = "America/Los_Angeles")

         
int_thanks <- interval((thanksgiving) - days(35), (thanksgiving) + days(35))

suspects <- suspects %>% 
  filter(Time.Spotted %within% int_thanks)
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
#Lab 5 Q5
surveys4 <- surveys |>
  select(genus, weight, day_of_week)

ggplot(data=surveys4, mapping = aes(x = fct_relevel(day_of_week, c('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')), fill = genus)) +
  geom_bar() +
  labs(x = 'Day of Week', y = '', title = 'Number of Rats per Day of Week')
```

-   Example 2

```{r dvs-2-2}
#Lab2 Q6
ggplot(data=surveys) + 
  geom_jitter(mapping=aes(x=weight, y=hindfoot_length, alpha = 0.1 ), position="jitter") + 
  labs(title = "Species Weight vs. Hindfoot Length", 
  x= "Weight (g)", y= "Hindfoot Length (mm)")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
# Lab5 Q 6
surveys5 <- surveys |>
  select(genus, weight, day_of_week)

ggplot(data=surveys5, mapping = aes(x = fct_collapse(day_of_week, weekday = c('Mon', 'Tue', 'Wed', 'Thu', 'Fri'), weekend = c('Sat', 'Sun')), fill=genus)) +
  geom_bar() +
  labs(x= 'Day of Week', y = '', title = 'Number of Rats per Day of Week')
```

-   Example 2

```{r dvs-3-2}
#Lab5 Q1
surveys <- read_csv(here("Week 2", "Lab 2", "surveys.csv"))

ggplot(data=surveys, mapping = aes(x=weight, y= fct_reorder(species, weight))) +
  geom_jitter(color= "darkseagreen") +
  geom_boxplot(outlier.shape = NA, alpha = 0.1) +
  labs(x="Weight (g)", y= '', title = "Rat Species vs. Weight")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}
#Lab4 Q6
cal_avocado <- avocado_clean |>
  group_by(region, type) |>
  semi_join(cal_regions, by = 'region') |>
  summarise(mean_price = mean(AveragePrice)) |>
  pivot_wider(names_from = type , values_from = mean_price) |>
  mutate(diff = conventional - organic)
```

-   Example 2

```{r dvs-4-2}
#Lab5 Q3
surveys3 <- surveys |>
  select(genus, weight, year) |>
  group_by(year, genus) |>
  summarize(mean_weight = mean(weight))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
#Lab3 Q9
hiphop_clean |>
  select(subj, sex, age, ethnic) |>
  distinct(subj, .keep_all = TRUE) |>
  summary()
count(hiphop_clean)
hiphop_clean
```

-   Example 2

```{r dvs-5-2}
#Lab4 Q6
cal_avocado <- avocado_clean |>
  group_by(region, type) |>
  semi_join(cal_regions, by = 'region') |>
  summarise(mean_price = mean(AveragePrice)) |>
  pivot_wider(names_from = type , values_from = mean_price) |>
  mutate(diff = conventional - organic)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}
#lab 9 Q the last one
allans2 %>%
    knitr::kable(format = "html", 
               digits = 3, 
               col.names = 
                 c("State", 
                   "Alan", 
                   "Allan",
                   "Allen"),
               caption = "Proportion of Allans, Allens, and Alans in CA and PA") %>%
  kableExtra::kable_styling(font_size = 20) %>%
  kableExtra::kable_classic(html_font = "verdana")
```

-   Example 2

```{r dvs-6-2}
#lab 9 Q allison
namesAllison |>
    knitr::kable(format = "html", 
               digits = 3, 
               col.names = 
                 c("State", 
                   "F", 
                   "M"),
               caption = "Number of Allisons in the U.S by State and Sex")
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}
#Lab9 Q last one
namesAllison |>
    knitr::kable(format = "html", 
               digits = 3, 
               col.names = 
                 c("State", 
                   "F", 
                   "M"),
               caption = "Number of Allisons in the U.S by State and Sex")
```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
#Lab 5 Q2
ggplot(data = surveys2, mapping = aes(x= year, y= weight, color = genus)) +
  geom_line() +
  labs(x= 'Year', y= 'Weight (g)', title = "Rat Genus vs. Weight")
```

-   `across()`

```{r pe-1-across}
#Lab3 Q5
hiphop_clean <- hiphop |>
  mutate(
    across( c(asianMove, blackMove, hispanicMove, nativeMove,
    SAAMEMove, whiteMove, blackWeekly, jayz, jayz1, barkley,
    boondocks, boondocks1, monique, bieber), as.factor)) |>
  drop_na(numPreferredArtists, numOverallArtists) |>
  select(word, subj, sex, age, ethnic, jayz:fam1) 
```

-   `map()` functions

```{r pe-1-map-1}
#Lab 8 Part 1.1
map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = '\n\n') |>
  cat()
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}
# Lab 7 Q 3.1/3.2
rescale_01 <- function(vec) {
    stopifnot(is.numeric(vec), length(vec) > 1)
    min_vec = min(vec)
    vecscale = (vec - min_vec / 
           (max(vec) - min_vec))
    return(vecscale)
}
```

-   Example 2

```{r pe2-2}
# Lab 7 Q6
rescale_column <- function(df, var_vec){
  fish <- fish |>
    mutate(across(.cols = {{ var_vec }}, 
                  ~ rescale_01(.x)
                  )
           )
  fish
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}
#Lab3 Q5
hiphop_clean <- hiphop |>
  mutate(
    across( c(asianMove, blackMove, hispanicMove, nativeMove,
    SAAMEMove, whiteMove, blackWeekly, jayz, jayz1, barkley,
    boondocks, boondocks1, monique, bieber), as.factor)) |>
  drop_na(numPreferredArtists, numOverallArtists) |>
  select(word, subj, sex, age, ethnic, jayz:fam1) 
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}
# PA 8 Step 1
purrr::map_chr(xmas$Gift.Item, pluralize_gift)

```

```{r pe-3-map-2}
# Lab 8 Step 2
map_chr(1:12, ~sing_day(xmas2, .x, Full.Phrase)) |>
  str_c(collapse = '\n\n') |>
  cat()

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}
#Lab 5 Q1
ggplot(data=surveys, mapping = aes(x=weight, y= fct_reorder(species, weight))) +
  geom_jitter(color= "darkseagreen") +
  geom_boxplot(outlier.shape = NA, alpha = 0.1) +
  labs(x="Weight (g)", y= '', title = "Rat Species vs. Weight")

# This uses modern tools because none of the functions in the code are superceded/deprecated.
```

-   Example 2

```{r pe-4-2}
#PA4 Q1
military_clean <- military |>
  mutate(across(.col = `Notes`:`2019`, 
         .fns = na_if,
         '. .')) |>
  mutate(across(.col = `Notes`:`2019`, 
                .fns = na_if,
                'xxx')) |>
  mutate(across(.col = `1988`:`2019`,
                .fns = as.numeric))
# This uses modern tools because none of the functions in the code are superceded/deprecated.
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}
# PA 9 Q 1
my_model_2 <- penguins |>
  lm(bill_length_mm ~ bill_depth_mm*species, data = _)
ggplot(data=my_model_2, mapping = aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
  geom_point() +
  stat_smooth(method = "lm") + 
  labs(x = "Bill Depth (mm)", 
       y = "Bill Length (mm)")
summary(my_model_2)

```

-   Example 2

```{r dsm-1-2}
# lab 9 q4
allison_lm <- my_viz |>
  lm(total_names ~ Year, data = _) 
  
broom::tidy(allison_lm)

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}
# PA 9 Q1
my_model_2 <- penguins |>
  lm(bill_length_mm ~ bill_depth_mm*species, data = _)
ggplot(data=my_model_2, mapping = aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
  geom_point() +
  stat_smooth(method = "lm") + 
  labs(x = "Bill Depth (mm)", 
       y = "Bill Length (mm)")
summary(my_model_2)
```

-   Example 2

```{r dsm-2-2}
# Lab 9 Q4
allison_lm <- my_viz |>
  lm(total_names ~ Year, data = _) 
  
broom::tidy(allison_lm)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

-I have revised my thinking throughout the course by modifying my quarto docs that were requested for revision. Most of my revisions included detailed explanations for why I got something as a G instead of an S, and how I figured out how to fix it. To aid myself in this process, I spent extra time asking for support or clarification on problems that I did not get an S on, and really worked towards actually revising and learning from my mistakes rather than just writing a few words about how to fix it. To me, it's important that I learn from what I messed up on, and one of the best ways for me to do that if I'm struggling is to seek extra help from peers and Dr. Theobold, and I found it all the more helpful in my continuation of learning.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

-I think I extended my thinking throughout the quarter so far in a couple of different ways. For one thing, I tried out a few different color schemes and packages in some of my assignments, which include the scales package for the axis modification, other color related packages, etc. I found it useful when I was stuck on a problem and I needed to find a way around a roadblock to consult other resources for ideas on what I could to do make my code function well. I think it definitely demonstrates that I have extended my thinking by my integration of different functions and pacakages not explicitly mentioned in class into my assignments.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

![](images/Screenshot%202023-02-16%20at%2010.46.38%20AM.png)
